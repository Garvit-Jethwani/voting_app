// ********RoostGPT********
/*
Application Test generated by RoostGPT for test ApplicationTest-Golang using AI Type Open AI and AI Model gpt-4-turbo


*/

// ********RoostGPT********
package main_test

import (
    "bytes"
    "encoding/json"
    "net/http"
    "net/http/httptest"
    "testing"

    "github.com/gorilla/mux"
    "github.com/stretchr/testify/assert"

    main "ecserver"
)

func setupRouter() *mux.Router {
    router := mux.NewRouter()
    router.HandleFunc("/api/vote", main.HandleVote).Methods("POST")
    router.HandleFunc("/api/results", main.HandleResults).Methods("GET")
    return router
}

func TestHandleVoteSuccess(t *testing.T) {
    var jsonStr = []byte(`{"candidate":"John Doe"}`)
    req, err := http.NewRequest("POST", "/api/vote", bytes.NewBuffer(jsonStr))
    assert.NoError(t, err)

    rr := httptest.NewRecorder()
    handler := http.HandlerFunc(main.HandleVote)

    router := setupRouter()
    router.ServeHTTP(rr, req)

    assert.Equal(t, http.StatusOK, rr.Code, "Expected response code to be 200")
    responseString := rr.Body.String()
    expected := "Vote registered!"
    assert.Equal(t, expected, responseString, "Expected successful response message")
}

func TestHandleVoteEmptyPayload(t *testing.T) {
    req, err := http.NewRequest("POST", "/api/vote", nil)
    assert.NoError(t, err)

    rr := httptest.NewRecorder()
    handler := http.HandlerFunc(main.HandleVote)

    router := setupRouter()
    router.ServeHTTP(rr, req)

    assert.Equal(t, http.StatusBadRequest, rr.Code, "Expected response code to be 400")
    responseString := rr.Body.String()
    expected := "Invalid request payload"
    assert.Equal(t, expected, responseString, "Expected error message for empty payload")
}

func TestHandleResultsSuccess(t *testing.T) {
    req, err := http.NewRequest("GET", "/api/results", nil)
    assert.NoError(t, err)

    rr := httptest.NewRecorder()
    handler := http.HandlerFunc(main.HandleResults)

    router := setupRouter()
    router.ServeHTTP(rr, req)

    assert.Equal(t, http.StatusOK, rr.Code, "Expected response code to be 200")

    var results map[string]int
    err = json.Unmarshal(rr.Body.Bytes(), &results)
    assert.NoError(t, err)
    assert.True(t, len(results) > 0, "Expected non-empty results map")
}

func TestHandleResultsEmptyDatabase(t *testing.T) {
    // Assuming there's a way to clear results database for testing, or mock the result
    main.ClearResultsForTesting()  // You need to implement this if it's relevant

    req, err := http.NewRequest("GET", "/api/results", nil)
    assert.NoError(t, err)

    rr := httptest.NewRecorder()
    router := setupRouter()
    router.ServeHTTP(rr, req)

    assert.Equal(t, http.StatusOK, rr.Code, "Expected response code to be 200")

    var results map[string]int
    err = json.Unmarshal(rr.Body.Bytes(), &results)
    assert.NoError(t, err)
    assert.True(t, len(results) == 0, "Expected empty results on cleared database")
}

