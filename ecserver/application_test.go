// ********RoostGPT********
/*
Application Test generated by RoostGPT for test ApplicationTest-Golang using AI Type Open AI and AI Model gpt-4-turbo


*/

// ********RoostGPT********
package main

import (
    "bytes"
    "encoding/json"
    "net/http"
    "net/http/httptest"
    "testing"

    "github.com/gin-gonic/gin"
    "github.com/stretchr/testify/assert"
)

func SetUpRouter() *gin.Engine {
    r := gin.Default()
    r.POST("/vote", handleCreateVote)
    r.GET("/votes", handleListVotes)
    r.GET("/vote/:id", handleGetVote)
    r.PUT("/vote/:id", handleUpdateVote)
    r.DELETE("/vote/:id", handleDeleteVote)
    return r
}

func TestCreateVote(t *testing.T) {
    router := SetUpRouter()
    vote := map[string]string{
        "candidate": "Cand1",
        "voter":     "Voter1",
    }
    voteJson, _ := json.Marshal(vote)
    req, _ := http.NewRequest("POST", "/vote", bytes.NewBuffer(voteJson))
    resp := httptest.NewRecorder()
    router.ServeHTTP(resp, req)

    assert.Equal(t, http.StatusOK, resp.Code, "Expected status: 200 OK on creating vote")
}

func TestListVotes(t *testing.T) {
    router := SetUpRouter()
    req, _ := http.NewRequest("GET", "/votes", nil)
    resp := httptest.NewRecorder()
    router.ServeHTTP(resp, req)

    assert.Equal(t, http.StatusOK, resp.Code, "Expected status: 200 OK on listing votes")
}

func TestGetVote(t *testing.T) {
    router := SetUpRouter()
    req, _ := http.NewRequest("GET", "/vote/123", nil)
    resp := httptest.NewRecorder()
    router.ServeHTTP(resp, req)

    assert.Equal(t, http.StatusOK, resp.Code, "Expected status: 200 OK on getting vote")
}

func TestUpdateVote(t *testing.T) {
    router := SetUpRouter()
    voteUpdate := map[string]string{
        "candidate": "Cand2",
    }
    voteUpdateJson, _ := json.Marshal(voteUpdate)
    req, _ := http.NewRequest("PUT", "/vote/123", bytes.NewBuffer(voteUpdateJson))
    resp := httptest.NewRecorder()
    router.ServeHTTP(resp, req)

    assert.Equal(t, http.StatusOK, resp.Code, "Expected status: 200 OK on updating vote")
}

func TestDeleteVote(t *testing.T) {
    router := SetUpRouter()
    req, _ := http.NewRequest("DELETE", "/vote/123", nil)
    resp := httptest.NewRecorder()
    router.ServeHTTP(resp, req)

    assert.Equal(t, http.StatusOK, resp.Code, "Expected status: 200 OK on deleting vote")
}


