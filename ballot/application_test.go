// ********RoostGPT********
/*
Application Test generated by RoostGPT for test ApplicationTest-Golang using AI Type Open AI and AI Model gpt-4-turbo


*/

// ********RoostGPT********
package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestServeRoot_GetResults(t *testing.T) {
	// Create a request to pass to our handler.
	req, err := http.NewRequest("GET", "/", nil)
	if err != nil {
		t.Fatal(err)
	}

	// We create a ResponseRecorder to record the response.
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(serveRoot)

	handler.ServeHTTP(rr, req)

	// Check the status code is what we expect.
	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	// Check the response body is what we expect.
	expected := `{"results":[{"candidate_id":"","vote_count":0}],"total_votes":0}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	}
}

func TestServeRoot_PostVote(t *testing.T) {
	// Creating a new vote
	vote := Vote{
		CandidateID: "1",
		VoterID: "10",
	}
	jsonVote, _ := json.Marshal(vote)
	req, err := http.NewRequest("POST", "/", bytes.NewBuffer(jsonVote))
	if err != nil {
		t.Fatal(err)
	}

	// We create a ResponseRecorder to record the response.
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(serveRoot)

	handler.ServeHTTP(rr, req)

	// Check the status code is what we expect.
	if status := rr.Code; status != http.StatusCreated {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusCreated)
	}

	// Check the response body is as expected
	expected := `{"code":201,"message":"Vote successfully counted"}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	}
}

