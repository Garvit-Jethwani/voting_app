// Test generated by RoostGPT for test test1 using AI Model gpt

```go
package main

import (
	"testing"
)

type Vote struct {
	CandidateID string
}

var candidateVotesStore map[string]int

func getCandidatesVote() map[string]int {
	if candidateVotesStore == nil {
		candidateVotesStore = make(map[string]int)
	}
	return candidateVotesStore
}

func saveVote(vote Vote) error {
	candidateVotesStore = getCandidatesVote()
	candidateVotesStore[vote.CandidateID]++
	return nil
}

func TestSaveVote31e2883bdc(t *testing.T) {
	candidates := []Vote{
		{CandidateID: "1"},
		{CandidateID: "2"},
		{CandidateID: "3"},
	}

	for _, candidate := range candidates {
		err := saveVote(candidate)
		if err != nil {
			t.Error("Expected no error, but got", err)
		}
	}

	if candidateVotesStore["1"] != 1 {
		t.Error("Expected 1 vote for candidate 1, but got", candidateVotesStore["1"])
	}

	if candidateVotesStore["2"] != 1 {
		t.Error("Expected 1 vote for candidate 2, but got", candidateVotesStore["2"])
	}

	if candidateVotesStore["3"] != 1 {
		t.Error("Expected 1 vote for candidate 3, but got", candidateVotesStore["3"])
	}

	// Test case for multiple votes for the same candidate
	err := saveVote(Vote{CandidateID: "1"})
	if err != nil {
		t.Error("Expected no error, but got", err)
	}

	if candidateVotesStore["1"] != 2 {
		t.Error("Expected 2 votes for candidate 1, but got", candidateVotesStore["1"])
	}
}